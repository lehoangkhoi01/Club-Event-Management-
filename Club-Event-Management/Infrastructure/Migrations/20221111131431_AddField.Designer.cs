// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ClubEventManagementContext))]
    [Migration("20221111131431_AddField")]
    partial class AddField
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApplicationCore.AdminAccount", b =>
                {
                    b.Property<int>("AdminAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIdentityEmail")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AdminAccountId");

                    b.HasIndex("UserIdentityEmail");

                    b.ToTable("AdminAccounts");
                });

            modelBuilder.Entity("ApplicationCore.ClubProfile", b =>
                {
                    b.Property<int>("ClubProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClubName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FoundationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SocialAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalMember")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ClubProfileId");

                    b.ToTable("ClubProfiles");
                });

            modelBuilder.Entity("ApplicationCore.ClubProfileStudentAccount", b =>
                {
                    b.Property<int>("StudentAccountId")
                        .HasColumnType("int");

                    b.Property<int>("ClubProfileId")
                        .HasColumnType("int");

                    b.Property<bool>("CanModify")
                        .HasColumnType("bit");

                    b.HasKey("StudentAccountId", "ClubProfileId");

                    b.HasIndex("ClubProfileId");

                    b.ToTable("ClubProfileStudentAccount");
                });

            modelBuilder.Entity("ApplicationCore.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EventCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EventEndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventStartTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EventStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsInternal")
                        .HasColumnType("bit");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EventCategoryId");

                    b.HasIndex("EventStatusId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("ApplicationCore.EventActivity", b =>
                {
                    b.Property<int>("EventActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventActivityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventActivityId");

                    b.HasIndex("EventId");

                    b.ToTable("EventActivities");
                });

            modelBuilder.Entity("ApplicationCore.EventCategory", b =>
                {
                    b.Property<int>("EventCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EventCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventCategoryId");

                    b.ToTable("EventCategories");
                });

            modelBuilder.Entity("ApplicationCore.EventClubProfile", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("ClubProfileId")
                        .HasColumnType("int");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("bit");

                    b.HasKey("EventId", "ClubProfileId");

                    b.HasIndex("ClubProfileId");

                    b.ToTable("EventClubProfile");
                });

            modelBuilder.Entity("ApplicationCore.EventPost", b =>
                {
                    b.Property<int>("EventPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClubProfileId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventPostId");

                    b.HasIndex("ClubProfileId");

                    b.HasIndex("EventId");

                    b.ToTable("EventPosts");
                });

            modelBuilder.Entity("ApplicationCore.EventStatus", b =>
                {
                    b.Property<int>("EventStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EventStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventStatusId");

                    b.ToTable("EventStatuses");
                });

            modelBuilder.Entity("ApplicationCore.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ApplicationCore.StudentAccount", b =>
                {
                    b.Property<int>("StudentAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIdentityEmail")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentAccountId");

                    b.HasIndex("UserIdentityEmail");

                    b.ToTable("StudentAccounts");
                });

            modelBuilder.Entity("ApplicationCore.UserIdentity", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Email");

                    b.HasIndex("RoleId");

                    b.ToTable("UserIdentities");
                });

            modelBuilder.Entity("ApplicationCore.AdminAccount", b =>
                {
                    b.HasOne("ApplicationCore.UserIdentity", "UserIdentity")
                        .WithMany()
                        .HasForeignKey("UserIdentityEmail");

                    b.Navigation("UserIdentity");
                });

            modelBuilder.Entity("ApplicationCore.ClubProfileStudentAccount", b =>
                {
                    b.HasOne("ApplicationCore.ClubProfile", "ClubProfile")
                        .WithMany("StudentAccountsLink")
                        .HasForeignKey("ClubProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.StudentAccount", "StudentAccount")
                        .WithMany("ClubLinks")
                        .HasForeignKey("StudentAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClubProfile");

                    b.Navigation("StudentAccount");
                });

            modelBuilder.Entity("ApplicationCore.Event", b =>
                {
                    b.HasOne("ApplicationCore.EventCategory", "EventCategory")
                        .WithMany("Events")
                        .HasForeignKey("EventCategoryId");

                    b.HasOne("ApplicationCore.EventStatus", "EventStatus")
                        .WithMany()
                        .HasForeignKey("EventStatusId");

                    b.Navigation("EventCategory");

                    b.Navigation("EventStatus");
                });

            modelBuilder.Entity("ApplicationCore.EventActivity", b =>
                {
                    b.HasOne("ApplicationCore.Event", "Event")
                        .WithMany("EventActivities")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ApplicationCore.EventClubProfile", b =>
                {
                    b.HasOne("ApplicationCore.ClubProfile", "ClubProfile")
                        .WithMany("EventsLink")
                        .HasForeignKey("ClubProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Event", "Event")
                        .WithMany("ClubProfilesLinks")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClubProfile");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ApplicationCore.EventPost", b =>
                {
                    b.HasOne("ApplicationCore.ClubProfile", "ClubProfile")
                        .WithMany()
                        .HasForeignKey("ClubProfileId");

                    b.HasOne("ApplicationCore.Event", "Event")
                        .WithMany("EventPosts")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClubProfile");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ApplicationCore.StudentAccount", b =>
                {
                    b.HasOne("ApplicationCore.UserIdentity", "UserIdentity")
                        .WithMany()
                        .HasForeignKey("UserIdentityEmail");

                    b.Navigation("UserIdentity");
                });

            modelBuilder.Entity("ApplicationCore.UserIdentity", b =>
                {
                    b.HasOne("ApplicationCore.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ApplicationCore.ClubProfile", b =>
                {
                    b.Navigation("EventsLink");

                    b.Navigation("StudentAccountsLink");
                });

            modelBuilder.Entity("ApplicationCore.Event", b =>
                {
                    b.Navigation("ClubProfilesLinks");

                    b.Navigation("EventActivities");

                    b.Navigation("EventPosts");
                });

            modelBuilder.Entity("ApplicationCore.EventCategory", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("ApplicationCore.StudentAccount", b =>
                {
                    b.Navigation("ClubLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
